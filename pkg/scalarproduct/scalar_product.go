package scalarproduct

// Note: in this version we assume domain is 32.
// Since we use int32.

import (
	"github.com/quartercastle/vector"

	twos "github.com/weng-chenghui/smc-golang/pkg/twoscomplement"
)

type Vec = vector.Vector

type AliceLocal struct {
	Xa  Vec
	Ra  Vec
	ra  int32
	t   int32
	Xb_ Vec
	ya  int32
}

type BobLocal struct {
	Xb  Vec
	Rb  Vec
	rb  int32
	Xa_ Vec
	yb  int32
}

type CommodityLocal struct {
	Ra Vec
	Rb Vec
	ra int32
}

type Alice interface {
	Set_Xb_(Vec)
	Set_t(int32)
	Step1GetToBob_Xa_() Vec
	Step2Set_ya()
	GetResult() int32
}

type Bob interface {
	Set_Xa_(Vec)
	Step1GetToAlice_Xb_() Vec
	Step2GetToAlice_t() int32
	GetResult() int32
}

type Commodity interface {
	Get_rb() int32
}

func NewAlice(Xa, Ra Vec, ra int32) Alice {
	return &AliceLocal{
		Xa: Xa,
		Ra: Ra,
		ra: ra,
	}
}

// Note: in this version, `yb` is passed in, not generated by Bob.
func NewBob(Xb, Rb Vec, rb, yb int32) Bob {
	return &BobLocal{
		Xb: Xb,
		Rb: Rb,
		rb: rb,
		yb: yb,
	}
}

func NewCommodity(Ra, Rb Vec, ra int32) Commodity {
	return &CommodityLocal{
		Ra: Ra,
		Rb: Rb,
		ra: ra,
	}
}

func (a *AliceLocal) Set_Xb_(v Vec) {
	a.Xb_ = v
}

func (a *AliceLocal) Set_t(t int32) {
	a.t = t
}

func (a *AliceLocal) Step1GetToBob_Xa_() Vec {
	return a.Xa.Add(a.Ra)
}

func (a *AliceLocal) Step2Set_ya() {
	RaXb_ := int32(twos.Dot(a.Ra, a.Xb_))
	a.ya = a.t - RaXb_ + a.ra
}

func (a *AliceLocal) GetResult() int32 {
	return a.ya
}

func (b *BobLocal) Set_Xa_(v Vec) {
	b.Xa_ = v
}

func (b *BobLocal) Step1GetToAlice_Xb_() Vec {
	return b.Xb.Add(b.Rb)
}

func (b *BobLocal) Step2GetToAlice_t() int32 {
	Xa_Xb := int32(twos.Dot(b.Xa_, b.Xb))
	return Xa_Xb + b.rb - b.yb
}

func (b *BobLocal) GetResult() int32 {
	return b.yb
}

// rb = Ra . Rb - ra
func (c *CommodityLocal) Get_rb() int32 {
	RaRb := int32(twos.Dot(c.Ra, c.Rb))
	return RaRb - c.ra
}

func Run(Xa, Xb, Ra, Rb Vec, ra, yb int32) (int32, int32) {
	c := NewCommodity(Ra, Rb, ra)
	rb := c.Get_rb()
	a := NewAlice(Xa, Ra, ra)
	b := NewBob(Xb, Rb, rb, yb)

	a.Set_Xb_(b.Step1GetToAlice_Xb_())
	b.Set_Xa_(a.Step1GetToBob_Xa_())

	a.Set_t(b.Step2GetToAlice_t())
	a.Step2Set_ya()
	return GetResults(a, b)
}

func GetResults(a Alice, b Bob) (int32, int32) {
	return a.GetResult(), b.GetResult()
}
